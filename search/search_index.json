{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"OMI Overview OMI , stands for Open Memory Interface All the code and related materials are contributed to different Github repositories: https://github.com/OpenCAPI/omi_host_fire . https://github.com/OpenCAPI/omi_asic_device_reference_design . https://github.com/OpenCAPI/omi_device_ice . What is OMI OMI is based on OpenAPI development and is aimed at offering a fast generic interface to address different types of memories. What can I do with OMI ...","title":"Overview"},{"location":"#omi-overview","text":"","title":"OMI Overview"},{"location":"#omi-stands-for-open-memory-interface","text":"All the code and related materials are contributed to different Github repositories: https://github.com/OpenCAPI/omi_host_fire . https://github.com/OpenCAPI/omi_asic_device_reference_design . https://github.com/OpenCAPI/omi_device_ice .","title":"OMI, stands for Open Memory Interface"},{"location":"#what-is-omi","text":"OMI is based on OpenAPI development and is aimed at offering a fast generic interface to address different types of memories.","title":"What is OMI"},{"location":"#what-can-i-do-with-omi","text":"...","title":"What can I do with OMI"},{"location":"deep-dive/board-package/","text":"Enable a new FPGA card to OC-Accel Create a folder in hardware/oc-bip/board_support_packages/<NEW_CARD> Call the make process under hardware/oc-bip/<NEW_CARD> Add the CARD_TYPE, and other specific IPs in OC-Accel hardware/setup Modify the related CARD_TYPE related information in software Add the card choice in Kconfig Menu scripts/Kconfig TODO: More details to be put down.","title":"Enable a new FPGA card to OC-Accel"},{"location":"deep-dive/board-package/#enable-a-new-fpga-card-to-oc-accel","text":"Create a folder in hardware/oc-bip/board_support_packages/<NEW_CARD> Call the make process under hardware/oc-bip/<NEW_CARD> Add the CARD_TYPE, and other specific IPs in OC-Accel hardware/setup Modify the related CARD_TYPE related information in software Add the card choice in Kconfig Menu scripts/Kconfig TODO: More details to be put down.","title":"Enable a new FPGA card to OC-Accel"},{"location":"deep-dive/hardware-logic/","text":"OC-Accel Hardware Diagram and Clock Domain Here is a more detailed diagram for OC-Accel Bridge mode. oc_bsp_wrap and oc_cfg come from oc-bip ( OpenCAPI3.0 Device Reference design ) oc_function comes from OC-Accel hardware/hdl/core . oc_action can be issued either from a regular or from a \"Partial Reconfiguration (PR)\" process. In the latter only this region is build and attached to a previously built base. A PR_code ensures they are compatible. oc_bsp_wrap has DLX, PHY, TLX, VPD (Virtual Product Data) and flash_sub_system. oc_cfg handles the registers defined in OpenCAPI CFG specification. Under oc_function, framework_afu can be replaced by other reference AFUs like AFP3 or MCP3 in OpenCAPI3.0 Device Reference design . framework_afu contains its cfg_descriptor to describe the basic settings for this AFU. It has following clock domains: clk_tlx : 400MHz (Doesn't change) clk_afu : 200MHz (Adjustable) clk_act : 200MHz (Adjustable) Other : Depending on the requirements of peripheral IPs The blocks with transitional color means it has the clock converter logic or asynchronous clock interfaces. A partial reconfiguration region is defined as shown in the dotted box. This area is dynamic area that allows user to change their functional logic and all of the other regions are static in PR (Partial Reconfiguration) Flow. Click here to get PR details. AXI4 feature list Here lists the AXI4 feature list of oc_snap_core: AXI Lite-M Signal Width ADDR 32bits DATA 32bits AXI-S Signal Bit Width Comment ADDR (AWADDR/ARADDR) 64 Unaligned address supported DATA (WDATA/RDATA) 1024 ID (AWID/ARID/BID/RID) 1 to 5 2 to 32 AXI IDs USER (AWUSER/ARUSER) 9 Support up to 512 PASID (multi-process contexts) SIZE (AWSIZE/ARSIZE) 3 All sized transactions from 1 byte to 128bytes are supported BURST (AWBURST/ARBURST) 2 INCR RESP (BRESP/RRESP) 2 OKAY or ERROR WSTRB 128 All patterns are supported Note Choose less AXI IDs can save the area of snap_core. The AXI ID ports have at least 1 bit. Drive zero if the Action hardware design doesn't use it. AXI signals cache , lock , qos , region are not supported Warning Burst type \"FIXED\" is coded in snap_core but hasn't been tested. TLx feature list TLX to AFU Commands They are connected to mmio_wrapper. pr_mem_read (4B, 8B) pr_wr_mem (4B, 8B) intrp_rdy AFU to TLX Commands They are connected to bridge_wrapper. assign_actag rd_wnitc (128B, 64B) dma_w (128B, 64B) dma_pr_w (1B to 32B) rd_pr_wnitc (1B to 32B) intrp_req","title":"OC-Accel Hardware"},{"location":"deep-dive/hardware-logic/#oc-accel-hardware","text":"","title":"OC-Accel Hardware"},{"location":"deep-dive/hardware-logic/#diagram-and-clock-domain","text":"Here is a more detailed diagram for OC-Accel Bridge mode. oc_bsp_wrap and oc_cfg come from oc-bip ( OpenCAPI3.0 Device Reference design ) oc_function comes from OC-Accel hardware/hdl/core . oc_action can be issued either from a regular or from a \"Partial Reconfiguration (PR)\" process. In the latter only this region is build and attached to a previously built base. A PR_code ensures they are compatible. oc_bsp_wrap has DLX, PHY, TLX, VPD (Virtual Product Data) and flash_sub_system. oc_cfg handles the registers defined in OpenCAPI CFG specification. Under oc_function, framework_afu can be replaced by other reference AFUs like AFP3 or MCP3 in OpenCAPI3.0 Device Reference design . framework_afu contains its cfg_descriptor to describe the basic settings for this AFU. It has following clock domains: clk_tlx : 400MHz (Doesn't change) clk_afu : 200MHz (Adjustable) clk_act : 200MHz (Adjustable) Other : Depending on the requirements of peripheral IPs The blocks with transitional color means it has the clock converter logic or asynchronous clock interfaces. A partial reconfiguration region is defined as shown in the dotted box. This area is dynamic area that allows user to change their functional logic and all of the other regions are static in PR (Partial Reconfiguration) Flow. Click here to get PR details.","title":"Diagram and Clock Domain"},{"location":"deep-dive/hardware-logic/#axi4-feature-list","text":"Here lists the AXI4 feature list of oc_snap_core:","title":"AXI4 feature list"},{"location":"deep-dive/hardware-logic/#axi-lite-m","text":"Signal Width ADDR 32bits DATA 32bits","title":"AXI Lite-M"},{"location":"deep-dive/hardware-logic/#axi-s","text":"Signal Bit Width Comment ADDR (AWADDR/ARADDR) 64 Unaligned address supported DATA (WDATA/RDATA) 1024 ID (AWID/ARID/BID/RID) 1 to 5 2 to 32 AXI IDs USER (AWUSER/ARUSER) 9 Support up to 512 PASID (multi-process contexts) SIZE (AWSIZE/ARSIZE) 3 All sized transactions from 1 byte to 128bytes are supported BURST (AWBURST/ARBURST) 2 INCR RESP (BRESP/RRESP) 2 OKAY or ERROR WSTRB 128 All patterns are supported Note Choose less AXI IDs can save the area of snap_core. The AXI ID ports have at least 1 bit. Drive zero if the Action hardware design doesn't use it. AXI signals cache , lock , qos , region are not supported Warning Burst type \"FIXED\" is coded in snap_core but hasn't been tested.","title":"AXI-S"},{"location":"deep-dive/hardware-logic/#tlx-feature-list","text":"","title":"TLx feature list"},{"location":"deep-dive/hardware-logic/#tlx-to-afu-commands","text":"They are connected to mmio_wrapper. pr_mem_read (4B, 8B) pr_wr_mem (4B, 8B) intrp_rdy","title":"TLX to AFU Commands"},{"location":"deep-dive/hardware-logic/#afu-to-tlx-commands","text":"They are connected to bridge_wrapper. assign_actag rd_wnitc (128B, 64B) dma_w (128B, 64B) dma_pr_w (1B to 32B) rd_pr_wnitc (1B to 32B) intrp_req","title":"AFU to TLX Commands"},{"location":"deep-dive/registers/","text":"OC-Accel Registers Configuration Registers link the software and hardware together. User application software code can use the provided libosnap APIs to read and write the registers implemented in FPGA logic, thus configure and control the functions in hardware. Those registers are also called MMIO (memory mapped IO) registers, because they are mapped into a large memory map. The \"addresses\" of these registers are 64bits wide. Memory map The OpenCAPI3.0 device memory map concepts (BAR, MMIO Global, MMIO Per PASID, and also memory space) are specified with respect to OpenCAPI configuration space specification . Here is a conceptual memory map: For OC-Accel: It only supports 1 AFU It only supports OpenCAPI3.0 C1 mode. MEM_SIZE = 0 It supports 512 PASIDs (User Process ID associated with a request) It only uses BAR0 Global MMIO Offset = 0, Size = 2GB Per PASID MMIO Offset = 2GB, Stride Size = 4MB So the above memory map is specified to: The settings can be found in: hardware/oc-bip/config_subsystem/cfg_descriptor.v Address Layout OC-Accel registers have two categories: Global Registers , 8B, defined in Global MMIO space. Use snap_global_read/write64() to access them. They are 64 bits wide since directly extracted from oc_cfg block. Action Registers , 4B, defined in Per PASID MMIO space. Use snap_action_read/write32() to access them. They are 32 bits wide since converted into AXI-lite protocol. The higher 32bits of tlx_afu_cmd_pa (Physical Address) should be matched with BAR0. The lower 32bits, also called mmio_address, is processed in OC-Accel. User can use snap_peek ( snap_poke ) to read (write) these registers: Read OC global BDR register (Build date register): $ snap_peek 0x0008 [00000008] 0000202011181128 Read OC action ATR register (Action ID): $ snap_peek -w32 0x0010 [00000010] 10143009 Global Registers: Summary mmio_address[30:8] mmio_address [7:0] Abbr. Register Name 0x0 (Basic) 0x00 IVR Implementation Version Register 0x08 BDR Build Date Register 0x10 SCR SNAP Command Register 0x18 SSR SNAP Status Register 0x30 CAP Capacity Register 0x40 FRT Free Running Timer (Up Time Counter) Register 0x50 USR User Defined Code Register 0x60 PRC Partial Reconfiguration Code 0x1A0 (Debug) 0x00 DBG_CLR Clear Debug Register 0x08 CNT_TLX_CMD Number of TLX Commands 0x10 CNT_TLX_RSP Number of TLX Responses 0x18 CNT_TLX_RTY Number of TLX Retry Responses 0x20 CNT_TLX_FAIL Number of TLX Fail Responses 0x28 CNT_TLX_XLP Number of TLX Translate Pending Responses 0x30 CNT_TLX_XLD Number of TLX Translate Done Responses 0x38 CNT_TLX_XLR Number of TLX Translate Retry Responses 0x40 CNT_AXI_CMD Number of total AXI Commands 0x48 CNT_AXI_RSP Number of total AXI Responses 0x50 BUF_CNT Counts in data buffers 0x58 TRAFIIC_IDLE No traffic over a period 0x60 TLX_IDLE_LIM Length of the period for TLX \"no traffic\" 0x68 AXI_IDLE_LIM Length of the period for AXI \"no traffic\" 0x1C0 (FIR) 0x00 FIFO_OVFL FIFO Overflow Status 0x08 FIR_TLX Errors on TLX interface Note FIR means \"Fault Isolation Register\". It usually means some errors happened. Global Registers: Details SNAP Basic Registers Implementation Version Register (IVR) Offset: 0x00 POR value depends on source for the build. Example for build based on commit with SHA ID eb43f4d80334d6a127af150345fed12dc5f45b7c and with distance 13 to SNAP Release v1.25.4: 0x0119040D_EB43F4D8 Bits Attributes Description 63..40 RO SNAP Release 63..56 RO Major release number 55..48 RO Intermediate release number 47..40 RO Minor release number 39..32 RO Distance of commit to SNAP release 31..0 RO First eight digits of SHA ID for commit Build Date Register (BDR) Offset: 0x08 POR value depends on build date and time. Example for build on January 12th, 2017 at 15:27: 0x00002017_01121527 Bits Attributes Description 63..48 RO Reserved 47.. 0 RO BCD coded build date and time 47..32 RO YYYY (year) 31..24 RO mm (month) 23..16 RO dd (day of month) 15..08 RO HH (hour) 07..00 RO MM (minute) SNAP Command Register (SCR) Offset: 0x10 Send SNAP commands via this register Bits Attributes Description 63..1 RO Reserved 0 WO soft reset to odma and action_wrapper SNAP Status Register (SSR) Offset: 0x18 Status of snap_core Bits Attributes Description 63..4 RO Reserved 3 RO SNAP fatal error: some bits are asserted in FIR registers 2 RO SNAP AXI side busy (?) 1 RO SNAP TLX side busy (?) 0 RO SNAP idle: Data buffers in snap_core are empty SNAP Capability Register (CAP) Offset: 0x30 Define the capability of the card Bitwise definition Bits Attributes Description 63..32 RO Reserved 31..16 RO Size of attached on-card SDRAM in MB 15..8 RO Reserved 7..0 RO Card type: 0x31 : AD9V3 0x32 : AD9H3 0x33 : AD9H7 0x34 : BW250SOC 0x35 : AD9H335 SNAP Free Running Timer (FRT) Offset: 0x40 is updated at each mmio clock Bitwise definition Bits Attributes Description 63..0 RO Counter value (mmio clock ticks since last reset) SNAP User Defined Code Register (USR) Offset: 0x50 Allows user to write a 64 bits wide user defined code in this register to ease debugging versions without modifying the release. (for the time being it is hand written in hardware/setup/patch-version.sh) Use oc_maint -u to read it in simulation or on actual hardware. Bitwise definition Bits Attributes Description 63..0 RO 64 bits (can represent 8 ASCII char) user defined code SNAP Partial Reconfiguration Code (PRC) Offset: 0x60 Oc-accel stores a random code in this register to identify the static configuration and provides a mean to verify dynamic configurations against the static image. Bitwise definition Bits Attributes Description 63..0 RO 64 bits (can represent 8 ASCII char) Partial Reconfiguration Code SNAP Debug Registers base_addr: 0x1A0 Note Subject to change. Debug Clear and Debug Counters DBG_CLR: Clear all of the following debug registers For following registers: bit[63:32] for Reads, bit [31:0] for Writes. CNT_TLX_CMD: Number of TLX Commands CNT_TLX_RSP: Number of TLX Responses CNT_TLX_RTY: Number of TLX Retry Responses CNT_TLX_FAIL: Number of TLX Fail Responses CNT_TLX_XLP: Number of TLX Translate Pending Responses CNT_TLX_XLD: Number of TLX Translate Done Responses CNT_TLX_XLR: Number of TLX Translate Retry Responses CNT_AXI_CMD: Number of total AXI Commands CNT_AXI_RSP: Number of total AXI Responses BUF_CNT: How many entries are valid for Read buffer and Write buffer Traffic Idle status TRAFFIC_IDLE: Used together with TLX_IDLE_LIM and AXI_IDLE_LIM. Bits Attributes Description 63..6 RO Reserved 5 RO tlx_cmd_idle in a certain number of cycles 4 RO tlx_rsp_idle in a certain number of cycles 3 RO axi_cmd_idle (Read) in a certain number of cycles 2 RO axi_rsp_idle (Read) in a certain number of cycles 1 RO axi_cmd_idle (Write) in a certain number of cycles 0 RO axi_rsp_idle (Write) in a certain number of cycles SNAP FIR Registers base_addr: 0x1C0 FIFO Overflow Status (FIFO_OVFL) offset: 0x00 Bits Attributes Description 63..6 RO Reserved 7 RO fir_fifo_overflow_cmdencw (Write Command Encoder) 6 RO fir_fifo_overflow_cmdencr (Read Command Encoder) 5 RO fir_fifo_overflow_cmdcnv (Command Clock Converter) 4 RO fir_fifo_overflow_rspcnv (Response Clock Converter) 3 RO fir_fifo_overflow_rspdecw (Write Response Decoder) 2 RO fir_fifo_overflow_rspdecr (Read Response Decoder) 1 RO fir_fifo_overflow_dbw (Write Data Buffer) 0 RO fir_fifo_overflow_dbr (Read Data Buffer) TLX Interface errors (FIR_TLX) offset: 0x08 Bits Attributes Description 63..3 RO Reserved 3 RO fir_tlx_response_unsupport 2 RO fir_tlx_rsp_err 1:0 RO fir_tlx_command_credit Action Registers: Summary mmio_address[30:22] means PASID. That means, the first process opens the OC Device, it will attach PASID=0 when it calls mmio_action_read/write32() . Meanwhile, the second process, the third process may attach PASID=1 and PASID=2 when they access the OC Device. Each process has its own \"process context\", and when OC Device wants to visit the host memory, it has to know which \"process context\" it belongs to, that means, the OC device needs to send the PASID with its commands. This PASID takes AWUSER or ARUSER as the vehicle to transfer from Action wrapper to snap_core. HDL design The user can freely define and implement the Action registers if it is written in Verilog/VHDL. However, there are still a registers that are recommended to implement. They are: mmio_address [21:0] Abbr. Register Name 0x00 ACR Action Control Register 0x04 IER Interrupt Enable Register 0x10 ATR Action Type Register 0x14 AVR Action Version Register 0x18 ISL Interrupt Handle SRC Address Low 0x1C ISH Interrupt Handle SRC Address High 0x30 -> end Reserved and can be freely used Action Control Register (ACR) offset: 0x00 Bits Attributes Description 31..4 RO Reserved 3 RO Action Ready 2 RO Action Idle 1 RO Action Done 0 RW Write 1 to start Action, Read it to know whether the action has been started Interrupt Enable Register (IER) offset: 0x04 Bits Attributes Description 31..1 RO Reserved 0 RW Enable Interrupt Action Type Register (ATR) offset: 0x10 Bits Attributes Description 31..0 RO Action Type, i.e, 0x10141008 Action Version Register (AVR) offset: 0x14 Bits Attributes Description 31..0 RO Action Release Version, user defined Interrupt Handle SRC Address Low (ISL) offset: 0x18 Bits Attributes Description 31..0 RO Interrupt Handle Source Address Low 32bits Interrupt Handle SRC Address High (ISH) offset: 0x1C Bits Attributes Description 31..0 RO Interrupt Handle Source Address High 32bits HLS design OC-Accel has already defined the Action Register Layout for HLS Actions. mmio_address [21:0] Abbr. Register Name 0x00 ACR Action Control Register 0x04 IER Global Interrupt Enable Register 0x08 IIE IP Interrupt Enable 0x0C IIS IP Interrupt Status 0x10 ATR Action Type Register 0x14 AVR Action Release Register 0x18 ISL Interrupt Handle SRC Address Low 0x1C ISH Interrupt Handle SRC Address High 0x20 ACTION_HBM_IF_NUM HBM AXI Interface Number 0x100 CONTROL1 sat + flags + seq 0x104 CONTROL2 Return Code 0x108 CONTROL3 Reserved 0x10C CONTROL4 Reserved 0x110 - 0x178 Job Data Registers (108 bytes) Note 0x00 to 0x0C are defined by Xilinx Document UG902. Action Control Register (ACR) offset: 0x00 Bits Attributes Description 31..8 RO Reserved 7 RW Auto Restart 6..4 RO Reserved 3 RO Action Ready 2 RO Action Idle 1 RO/Clear on Read Action Done 0 RW/Clear on Read Start Action Global Interrupt Enable (IER) offset: 0x04 Bits Attributes Description 31..1 RO Reserved 0 RW Enable Interrupt IP Interrupt Enable (IIE) offset: 0x08 Bits Attributes Description 31..2 RO Reserved 1 RW Interrupt for ap_ready is enabled 0 RW Interrupt for ap_done is enabled IP Interrupt Status (IIS) offset: 0x0C Bits Attributes Description 31..2 RO Reserved 1 RW Status for ap_ready interrupt 0 RW Status for ap_done interrupt ATR, AVR, ISL, ISH These 4 registers have the same definitions as in HDL Action. offset: 0x10, ATR, Action Type Register offset: 0x14, AVR, Action Release Register offset: 0x18, ISL, Interrupt Handle SRC Address Low offset: 0x1C, ISH, Interrupt Handle SRC Address High HLS CONTROL Registers 4 registers are defined in actions/include/hls_snap.H . They take the addresses of 0x100, 0x104, 0x108 and 0x10C. typedef struct { snapu8_t sat; // short action type snapu8_t flags; snapu16_t seq; snapu32_t Retc; snapu64_t Reserved; // Priv_data } CONTROL; HLS Job DATA Registers 0x110 to 0x178 are user defined Job data structure. The size limit is 108 bytes. This is usually defined in actions/hls_<action_name>/include/<action_name>.h For example: typedef struct helloworld_job { struct snap_addr in; /* input data */ struct snap_addr out; /* offset table */ } helloworld_job_t; Acronyms PASID : Process Address Space ID","title":"OC-Accel Registers"},{"location":"deep-dive/registers/#oc-accel-registers","text":"Configuration Registers link the software and hardware together. User application software code can use the provided libosnap APIs to read and write the registers implemented in FPGA logic, thus configure and control the functions in hardware. Those registers are also called MMIO (memory mapped IO) registers, because they are mapped into a large memory map. The \"addresses\" of these registers are 64bits wide.","title":"OC-Accel Registers"},{"location":"deep-dive/registers/#memory-map","text":"The OpenCAPI3.0 device memory map concepts (BAR, MMIO Global, MMIO Per PASID, and also memory space) are specified with respect to OpenCAPI configuration space specification . Here is a conceptual memory map: For OC-Accel: It only supports 1 AFU It only supports OpenCAPI3.0 C1 mode. MEM_SIZE = 0 It supports 512 PASIDs (User Process ID associated with a request) It only uses BAR0 Global MMIO Offset = 0, Size = 2GB Per PASID MMIO Offset = 2GB, Stride Size = 4MB So the above memory map is specified to: The settings can be found in: hardware/oc-bip/config_subsystem/cfg_descriptor.v","title":"Memory map"},{"location":"deep-dive/registers/#address-layout","text":"OC-Accel registers have two categories: Global Registers , 8B, defined in Global MMIO space. Use snap_global_read/write64() to access them. They are 64 bits wide since directly extracted from oc_cfg block. Action Registers , 4B, defined in Per PASID MMIO space. Use snap_action_read/write32() to access them. They are 32 bits wide since converted into AXI-lite protocol. The higher 32bits of tlx_afu_cmd_pa (Physical Address) should be matched with BAR0. The lower 32bits, also called mmio_address, is processed in OC-Accel. User can use snap_peek ( snap_poke ) to read (write) these registers: Read OC global BDR register (Build date register): $ snap_peek 0x0008 [00000008] 0000202011181128 Read OC action ATR register (Action ID): $ snap_peek -w32 0x0010 [00000010] 10143009","title":"Address Layout"},{"location":"deep-dive/registers/#global-registers-summary","text":"mmio_address[30:8] mmio_address [7:0] Abbr. Register Name 0x0 (Basic) 0x00 IVR Implementation Version Register 0x08 BDR Build Date Register 0x10 SCR SNAP Command Register 0x18 SSR SNAP Status Register 0x30 CAP Capacity Register 0x40 FRT Free Running Timer (Up Time Counter) Register 0x50 USR User Defined Code Register 0x60 PRC Partial Reconfiguration Code 0x1A0 (Debug) 0x00 DBG_CLR Clear Debug Register 0x08 CNT_TLX_CMD Number of TLX Commands 0x10 CNT_TLX_RSP Number of TLX Responses 0x18 CNT_TLX_RTY Number of TLX Retry Responses 0x20 CNT_TLX_FAIL Number of TLX Fail Responses 0x28 CNT_TLX_XLP Number of TLX Translate Pending Responses 0x30 CNT_TLX_XLD Number of TLX Translate Done Responses 0x38 CNT_TLX_XLR Number of TLX Translate Retry Responses 0x40 CNT_AXI_CMD Number of total AXI Commands 0x48 CNT_AXI_RSP Number of total AXI Responses 0x50 BUF_CNT Counts in data buffers 0x58 TRAFIIC_IDLE No traffic over a period 0x60 TLX_IDLE_LIM Length of the period for TLX \"no traffic\" 0x68 AXI_IDLE_LIM Length of the period for AXI \"no traffic\" 0x1C0 (FIR) 0x00 FIFO_OVFL FIFO Overflow Status 0x08 FIR_TLX Errors on TLX interface Note FIR means \"Fault Isolation Register\". It usually means some errors happened.","title":"Global Registers: Summary"},{"location":"deep-dive/registers/#global-registers-details","text":"","title":"Global Registers: Details"},{"location":"deep-dive/registers/#snap-basic-registers","text":"","title":"SNAP Basic Registers"},{"location":"deep-dive/registers/#implementation-version-register-ivr","text":"Offset: 0x00 POR value depends on source for the build. Example for build based on commit with SHA ID eb43f4d80334d6a127af150345fed12dc5f45b7c and with distance 13 to SNAP Release v1.25.4: 0x0119040D_EB43F4D8 Bits Attributes Description 63..40 RO SNAP Release 63..56 RO Major release number 55..48 RO Intermediate release number 47..40 RO Minor release number 39..32 RO Distance of commit to SNAP release 31..0 RO First eight digits of SHA ID for commit","title":"Implementation Version Register (IVR)"},{"location":"deep-dive/registers/#build-date-register-bdr","text":"Offset: 0x08 POR value depends on build date and time. Example for build on January 12th, 2017 at 15:27: 0x00002017_01121527 Bits Attributes Description 63..48 RO Reserved 47.. 0 RO BCD coded build date and time 47..32 RO YYYY (year) 31..24 RO mm (month) 23..16 RO dd (day of month) 15..08 RO HH (hour) 07..00 RO MM (minute)","title":"Build Date Register (BDR)"},{"location":"deep-dive/registers/#snap-command-register-scr","text":"Offset: 0x10 Send SNAP commands via this register Bits Attributes Description 63..1 RO Reserved 0 WO soft reset to odma and action_wrapper","title":"SNAP Command Register (SCR)"},{"location":"deep-dive/registers/#snap-status-register-ssr","text":"Offset: 0x18 Status of snap_core Bits Attributes Description 63..4 RO Reserved 3 RO SNAP fatal error: some bits are asserted in FIR registers 2 RO SNAP AXI side busy (?) 1 RO SNAP TLX side busy (?) 0 RO SNAP idle: Data buffers in snap_core are empty","title":"SNAP Status Register (SSR)"},{"location":"deep-dive/registers/#snap-capability-register-cap","text":"Offset: 0x30 Define the capability of the card Bitwise definition Bits Attributes Description 63..32 RO Reserved 31..16 RO Size of attached on-card SDRAM in MB 15..8 RO Reserved 7..0 RO Card type: 0x31 : AD9V3 0x32 : AD9H3 0x33 : AD9H7 0x34 : BW250SOC 0x35 : AD9H335","title":"SNAP Capability Register (CAP)"},{"location":"deep-dive/registers/#snap-free-running-timer-frt","text":"Offset: 0x40 is updated at each mmio clock Bitwise definition Bits Attributes Description 63..0 RO Counter value (mmio clock ticks since last reset)","title":"SNAP Free Running Timer  (FRT)"},{"location":"deep-dive/registers/#snap-user-defined-code-register-usr","text":"Offset: 0x50 Allows user to write a 64 bits wide user defined code in this register to ease debugging versions without modifying the release. (for the time being it is hand written in hardware/setup/patch-version.sh) Use oc_maint -u to read it in simulation or on actual hardware. Bitwise definition Bits Attributes Description 63..0 RO 64 bits (can represent 8 ASCII char) user defined code","title":"SNAP User Defined Code Register (USR)"},{"location":"deep-dive/registers/#snap-partial-reconfiguration-code-prc","text":"Offset: 0x60 Oc-accel stores a random code in this register to identify the static configuration and provides a mean to verify dynamic configurations against the static image. Bitwise definition Bits Attributes Description 63..0 RO 64 bits (can represent 8 ASCII char) Partial Reconfiguration Code","title":"SNAP Partial Reconfiguration Code (PRC)"},{"location":"deep-dive/registers/#snap-debug-registers","text":"base_addr: 0x1A0 Note Subject to change.","title":"SNAP Debug Registers"},{"location":"deep-dive/registers/#debug-clear-and-debug-counters","text":"DBG_CLR: Clear all of the following debug registers For following registers: bit[63:32] for Reads, bit [31:0] for Writes. CNT_TLX_CMD: Number of TLX Commands CNT_TLX_RSP: Number of TLX Responses CNT_TLX_RTY: Number of TLX Retry Responses CNT_TLX_FAIL: Number of TLX Fail Responses CNT_TLX_XLP: Number of TLX Translate Pending Responses CNT_TLX_XLD: Number of TLX Translate Done Responses CNT_TLX_XLR: Number of TLX Translate Retry Responses CNT_AXI_CMD: Number of total AXI Commands CNT_AXI_RSP: Number of total AXI Responses BUF_CNT: How many entries are valid for Read buffer and Write buffer","title":"Debug Clear and Debug Counters"},{"location":"deep-dive/registers/#traffic-idle-status","text":"TRAFFIC_IDLE: Used together with TLX_IDLE_LIM and AXI_IDLE_LIM. Bits Attributes Description 63..6 RO Reserved 5 RO tlx_cmd_idle in a certain number of cycles 4 RO tlx_rsp_idle in a certain number of cycles 3 RO axi_cmd_idle (Read) in a certain number of cycles 2 RO axi_rsp_idle (Read) in a certain number of cycles 1 RO axi_cmd_idle (Write) in a certain number of cycles 0 RO axi_rsp_idle (Write) in a certain number of cycles","title":"Traffic Idle status"},{"location":"deep-dive/registers/#snap-fir-registers","text":"base_addr: 0x1C0","title":"SNAP FIR Registers"},{"location":"deep-dive/registers/#fifo-overflow-status-fifo_ovfl","text":"offset: 0x00 Bits Attributes Description 63..6 RO Reserved 7 RO fir_fifo_overflow_cmdencw (Write Command Encoder) 6 RO fir_fifo_overflow_cmdencr (Read Command Encoder) 5 RO fir_fifo_overflow_cmdcnv (Command Clock Converter) 4 RO fir_fifo_overflow_rspcnv (Response Clock Converter) 3 RO fir_fifo_overflow_rspdecw (Write Response Decoder) 2 RO fir_fifo_overflow_rspdecr (Read Response Decoder) 1 RO fir_fifo_overflow_dbw (Write Data Buffer) 0 RO fir_fifo_overflow_dbr (Read Data Buffer)","title":"FIFO Overflow Status (FIFO_OVFL)"},{"location":"deep-dive/registers/#tlx-interface-errors-fir_tlx","text":"offset: 0x08 Bits Attributes Description 63..3 RO Reserved 3 RO fir_tlx_response_unsupport 2 RO fir_tlx_rsp_err 1:0 RO fir_tlx_command_credit","title":"TLX Interface errors (FIR_TLX)"},{"location":"deep-dive/registers/#action-registers-summary","text":"mmio_address[30:22] means PASID. That means, the first process opens the OC Device, it will attach PASID=0 when it calls mmio_action_read/write32() . Meanwhile, the second process, the third process may attach PASID=1 and PASID=2 when they access the OC Device. Each process has its own \"process context\", and when OC Device wants to visit the host memory, it has to know which \"process context\" it belongs to, that means, the OC device needs to send the PASID with its commands. This PASID takes AWUSER or ARUSER as the vehicle to transfer from Action wrapper to snap_core.","title":"Action Registers: Summary"},{"location":"deep-dive/registers/#hdl-design","text":"The user can freely define and implement the Action registers if it is written in Verilog/VHDL. However, there are still a registers that are recommended to implement. They are: mmio_address [21:0] Abbr. Register Name 0x00 ACR Action Control Register 0x04 IER Interrupt Enable Register 0x10 ATR Action Type Register 0x14 AVR Action Version Register 0x18 ISL Interrupt Handle SRC Address Low 0x1C ISH Interrupt Handle SRC Address High 0x30 -> end Reserved and can be freely used","title":"HDL design"},{"location":"deep-dive/registers/#action-control-register-acr","text":"offset: 0x00 Bits Attributes Description 31..4 RO Reserved 3 RO Action Ready 2 RO Action Idle 1 RO Action Done 0 RW Write 1 to start Action, Read it to know whether the action has been started","title":"Action Control Register (ACR)"},{"location":"deep-dive/registers/#interrupt-enable-register-ier","text":"offset: 0x04 Bits Attributes Description 31..1 RO Reserved 0 RW Enable Interrupt","title":"Interrupt Enable Register (IER)"},{"location":"deep-dive/registers/#action-type-register-atr","text":"offset: 0x10 Bits Attributes Description 31..0 RO Action Type, i.e, 0x10141008","title":"Action Type Register (ATR)"},{"location":"deep-dive/registers/#action-version-register-avr","text":"offset: 0x14 Bits Attributes Description 31..0 RO Action Release Version, user defined","title":"Action Version Register (AVR)"},{"location":"deep-dive/registers/#interrupt-handle-src-address-low-isl","text":"offset: 0x18 Bits Attributes Description 31..0 RO Interrupt Handle Source Address Low 32bits","title":"Interrupt Handle SRC Address Low (ISL)"},{"location":"deep-dive/registers/#interrupt-handle-src-address-high-ish","text":"offset: 0x1C Bits Attributes Description 31..0 RO Interrupt Handle Source Address High 32bits","title":"Interrupt Handle SRC Address High (ISH)"},{"location":"deep-dive/registers/#hls-design","text":"OC-Accel has already defined the Action Register Layout for HLS Actions. mmio_address [21:0] Abbr. Register Name 0x00 ACR Action Control Register 0x04 IER Global Interrupt Enable Register 0x08 IIE IP Interrupt Enable 0x0C IIS IP Interrupt Status 0x10 ATR Action Type Register 0x14 AVR Action Release Register 0x18 ISL Interrupt Handle SRC Address Low 0x1C ISH Interrupt Handle SRC Address High 0x20 ACTION_HBM_IF_NUM HBM AXI Interface Number 0x100 CONTROL1 sat + flags + seq 0x104 CONTROL2 Return Code 0x108 CONTROL3 Reserved 0x10C CONTROL4 Reserved 0x110 - 0x178 Job Data Registers (108 bytes) Note 0x00 to 0x0C are defined by Xilinx Document UG902.","title":"HLS design"},{"location":"deep-dive/registers/#action-control-register-acr_1","text":"offset: 0x00 Bits Attributes Description 31..8 RO Reserved 7 RW Auto Restart 6..4 RO Reserved 3 RO Action Ready 2 RO Action Idle 1 RO/Clear on Read Action Done 0 RW/Clear on Read Start Action","title":"Action Control Register (ACR)"},{"location":"deep-dive/registers/#global-interrupt-enable-ier","text":"offset: 0x04 Bits Attributes Description 31..1 RO Reserved 0 RW Enable Interrupt","title":"Global Interrupt Enable (IER)"},{"location":"deep-dive/registers/#ip-interrupt-enable-iie","text":"offset: 0x08 Bits Attributes Description 31..2 RO Reserved 1 RW Interrupt for ap_ready is enabled 0 RW Interrupt for ap_done is enabled","title":"IP Interrupt Enable (IIE)"},{"location":"deep-dive/registers/#ip-interrupt-status-iis","text":"offset: 0x0C Bits Attributes Description 31..2 RO Reserved 1 RW Status for ap_ready interrupt 0 RW Status for ap_done interrupt","title":"IP Interrupt Status (IIS)"},{"location":"deep-dive/registers/#atr-avr-isl-ish","text":"These 4 registers have the same definitions as in HDL Action. offset: 0x10, ATR, Action Type Register offset: 0x14, AVR, Action Release Register offset: 0x18, ISL, Interrupt Handle SRC Address Low offset: 0x1C, ISH, Interrupt Handle SRC Address High","title":"ATR, AVR, ISL, ISH"},{"location":"deep-dive/registers/#hls-control-registers","text":"4 registers are defined in actions/include/hls_snap.H . They take the addresses of 0x100, 0x104, 0x108 and 0x10C. typedef struct { snapu8_t sat; // short action type snapu8_t flags; snapu16_t seq; snapu32_t Retc; snapu64_t Reserved; // Priv_data } CONTROL;","title":"HLS CONTROL Registers"},{"location":"deep-dive/registers/#hls-job-data-registers","text":"0x110 to 0x178 are user defined Job data structure. The size limit is 108 bytes. This is usually defined in actions/hls_<action_name>/include/<action_name>.h For example: typedef struct helloworld_job { struct snap_addr in; /* input data */ struct snap_addr out; /* offset table */ } helloworld_job_t;","title":"HLS Job DATA Registers"},{"location":"deep-dive/registers/#acronyms","text":"PASID : Process Address Space ID","title":"Acronyms"},{"location":"deep-dive/software-api/","text":"OC-Accel Software Environment Variables To debug libsnap functionality or associated actions, there are currently some environment variables available: SNAP_TRACE : 0x1 General libsnap trace 0x2 Enable register read/write trace 0x4 Enable simulation specific trace 0x8 Enable action traces. For example, use SNAP_TRACE=0xF to enable all above. Applications might use more bits above those defined here. Tools oc_maint: Currently it just prints information. snap_peek: debug tools to read MMIO registers. snap_poke: debug tools to write MMIO registers. APIs Refer to: include/libosnap.h lib/osnap.c","title":"OC-Accel Software"},{"location":"deep-dive/software-api/#oc-accel-software","text":"","title":"OC-Accel Software"},{"location":"deep-dive/software-api/#environment-variables","text":"To debug libsnap functionality or associated actions, there are currently some environment variables available: SNAP_TRACE : 0x1 General libsnap trace 0x2 Enable register read/write trace 0x4 Enable simulation specific trace 0x8 Enable action traces. For example, use SNAP_TRACE=0xF to enable all above. Applications might use more bits above those defined here.","title":"Environment Variables"},{"location":"deep-dive/software-api/#tools","text":"oc_maint: Currently it just prints information. snap_peek: debug tools to read MMIO registers. snap_poke: debug tools to write MMIO registers.","title":"Tools"},{"location":"deep-dive/software-api/#apis","text":"Refer to: include/libosnap.h lib/osnap.c","title":"APIs"},{"location":"misc/doc-guide/","text":"How to generate this website This static documentation website is created by MkDocs and is using a theme from bootswatch . It uses \"github pages\" and this site is hosted by Github. The documentation source files are written in Markdown format. With MkDocs tool, the generated site files (html files) are automatically pushed into a specific branch gh-pages of the git repository. Installation 1. Install python and pip python and pip 2. Install mkdocs-bootswatch pip install mkdocs-bootswatch Please refer to bootswatch for more information. 3. Install a markdown editor You can simply edit the markdown (.md) files by any text editor, but it's better to user a professional markdown editor. typora . It supports all of the platforms (Windows/MacOS/Linux). Please configure typora to strict Markdown mode. That ensures you get the same output effects on both typora and mkdocs . vscode . It's also a good editor and has abundant functions and extensions. You can install extensions of Markdown, Preview and Spell checker. 4. Install other optional tools pdf2svg: This tool can convert a pdf lossless picture to svg format. For Mac OS, it can be easily installed by Homebrew , simply by brew install pdf2svg . Alternative choice is Inkscape which is a free drawing tool and can help you draw and convert vector graphics. Website Structure First, you need to git clone the oc-accel repository and go to web-doc directory. Make sure you are working on a branch other than master. $ git clone git@github.com:OpenCAPI/oc-accel-doc.git $ cd oc-accel/web-doc Create a branch if needed: $ git branch <new-branch-name> $ git checkout <A branch other than master> The docs folder is where to put the markdown files, and the mkdocs.yml lists the website structure and global definitons. For example, this site has a structure like: nav: - Home: 'index.md' - User Guide: - 'Prepare Environment': 'user-guide/prepare-env.md' - 'Run an example': 'user-guide/run-example.md' - 'Create a new action': 'user-guide/new-action.md' - 'Co-Simulation': 'user-guide/co-simulation.md' - 'FPGA Image build': 'user-guide/make-image.md' - 'Optimize HLS action': 'user-guide/optimize-hls.md' - 'Deploy on Power Server': 'user-guide/deploy.md' - 'Debug an issue': 'user-guide/debug-issue.md' - 'Command Reference': 'user-guide/command-reference.md' - Examples: - 'hdl_example': 'actions-doc/hdl-example.md' - 'hdl_helloworld': 'actions-doc/hdl-helloworld.md' - 'hls_helloworld_1024': 'actions-doc/hls-helloworld_1024.md' - 'hls_memcopy': 'actions-doc/hls-memcopy.md' - Deep Dive: - 'SNAP Software API': 'deep-dive/libosnap.md' - 'SNAP Registers': 'deep-dive/registers.md' - 'SNAP Logic Design': 'deep-dive/snap_core.md' - 'New Board Support': 'deep-dive/board-package.md' - Misc: - 'Document Guide': 'misc/doc-guide.md' You can edit them as needed. Write Markdown pages On your local desktop, edit markdown files under web-doc/docs folder. If you want to add/delete/rename the files, you also need to edit mkdocs.yml Now it's time to work with an editor (i.e, typora) to write the documents. You also may need to learn some markdown syntax. Don't worry, that's easy. And please turn on the \"spell checking\" in your Markdown editor. In your terminal (MacOS or Linux), or cmd (Windows), start a serve process: # enter in the directory where mkdocs.yml is located cd ~/oc-accel-doc/web-doc #launch a local webserver to test your mods mkdocs serve Then open a web browser, input http://127.0.0.1:8000 . So whenever you save any markdown files, you can check the generated website immediately. Play with pictures The first rule Reduce the usage of pictures. Avoid unnecessary screenshots. It's quite easy You can insert jpg, png, svg files. You can also simply copy paste pictures from clipboard and paste them. Copy the files into a directory ./${filename}.assets , and here ${filename} is the name of markdown file. Use relative links in the document. Note If you are using Typora, please enable \"Copy images into ./${filename}.assets folder\" in Preferences of typora. Tools to draw diagrams You can take any drawing tools to create diagrams. You can save them as PNG format, but the better way is to save to SVG format. For the diagrams from Microsoft PowerPoint, you can select the region of a diagram in PPT, Ctrl-C to copy it, and Ctrl-V to paste it in Typora directly. In this case, the diagram is saved as an PNG file. But there is a better way to get the smallest file size and best quality: In PowerPoint, select the region of diagram, right-click mouse -> \"Save as Picture ...\" and save it as \"PDF\" format. Open the PDF file with Inkscape . (Right-click the file -> \"Open with ...\", choose Inkscape in the poped up list). Unclick \"Embed images\" and then \"OK\". In Inkscape, save it as SVG file. Insert the SVG file into Typora. In my experiment, the PNG file is 188KB. But with the above flow to save it as SVG file, its size is 62KB. As a vectored diagram, it doesn't have any quality loss when zooming in. Warning Please use normal fonts in PPT, for example \"Arial\". Otherwise you may get a SVG file with a replaced font and that may look different. Code blocks and Admonitions Code blocks Please assign the code language so it can be correctly rendered. For example ``` C for C language. // A function to implement bubble sort void bubbleSort(int arr[], int n) { int i, j; for (i = 0; i < n-1; i++) // Last i elements are already in place for (j = 0; j < n-i-1; j++) if (arr[j] > arr[j+1]) swap(&arr[j], &arr[j+1]); } Admonitions You can use !!! Note or !!! Warning or !!! Danger to start a paragraph of admonitions. Then use 4 spaces to start the admonition text. For example !!! Danger \"Error Message\" This is a dangerous error. It will be shown as: Error Message This is a dangerous error. Deploy to Github Pages When most of the edition work is done, and it's time to commit your documents to oc-accel github. First, you should commit and push your changes of source files (in web-doc ) to git repository. Create pull request, ask someone to review the documents, merge them into master branch after getting approvements. Then you can simply publish website with just one step: cd <PATH>/oc-accel-doc/web-doc mkdocs gh-deploy The entire website will be pushed to gh-pages branch of omi-doc repository. The documentation website will be available at https://opencapi.github.io/omi-doc/ !","title":"Document Guide"},{"location":"misc/doc-guide/#how-to-generate-this-website","text":"This static documentation website is created by MkDocs and is using a theme from bootswatch . It uses \"github pages\" and this site is hosted by Github. The documentation source files are written in Markdown format. With MkDocs tool, the generated site files (html files) are automatically pushed into a specific branch gh-pages of the git repository.","title":"How to generate this website"},{"location":"misc/doc-guide/#installation","text":"","title":"Installation"},{"location":"misc/doc-guide/#1-install-python-and-pip","text":"python and pip","title":"1. Install python and pip"},{"location":"misc/doc-guide/#2-install-mkdocs-bootswatch","text":"pip install mkdocs-bootswatch Please refer to bootswatch for more information.","title":"2. Install mkdocs-bootswatch"},{"location":"misc/doc-guide/#3-install-a-markdown-editor","text":"You can simply edit the markdown (.md) files by any text editor, but it's better to user a professional markdown editor. typora . It supports all of the platforms (Windows/MacOS/Linux). Please configure typora to strict Markdown mode. That ensures you get the same output effects on both typora and mkdocs . vscode . It's also a good editor and has abundant functions and extensions. You can install extensions of Markdown, Preview and Spell checker.","title":"3. Install a markdown editor"},{"location":"misc/doc-guide/#4-install-other-optional-tools","text":"pdf2svg: This tool can convert a pdf lossless picture to svg format. For Mac OS, it can be easily installed by Homebrew , simply by brew install pdf2svg . Alternative choice is Inkscape which is a free drawing tool and can help you draw and convert vector graphics.","title":"4. Install other optional tools"},{"location":"misc/doc-guide/#website-structure","text":"First, you need to git clone the oc-accel repository and go to web-doc directory. Make sure you are working on a branch other than master. $ git clone git@github.com:OpenCAPI/oc-accel-doc.git $ cd oc-accel/web-doc Create a branch if needed: $ git branch <new-branch-name> $ git checkout <A branch other than master> The docs folder is where to put the markdown files, and the mkdocs.yml lists the website structure and global definitons. For example, this site has a structure like: nav: - Home: 'index.md' - User Guide: - 'Prepare Environment': 'user-guide/prepare-env.md' - 'Run an example': 'user-guide/run-example.md' - 'Create a new action': 'user-guide/new-action.md' - 'Co-Simulation': 'user-guide/co-simulation.md' - 'FPGA Image build': 'user-guide/make-image.md' - 'Optimize HLS action': 'user-guide/optimize-hls.md' - 'Deploy on Power Server': 'user-guide/deploy.md' - 'Debug an issue': 'user-guide/debug-issue.md' - 'Command Reference': 'user-guide/command-reference.md' - Examples: - 'hdl_example': 'actions-doc/hdl-example.md' - 'hdl_helloworld': 'actions-doc/hdl-helloworld.md' - 'hls_helloworld_1024': 'actions-doc/hls-helloworld_1024.md' - 'hls_memcopy': 'actions-doc/hls-memcopy.md' - Deep Dive: - 'SNAP Software API': 'deep-dive/libosnap.md' - 'SNAP Registers': 'deep-dive/registers.md' - 'SNAP Logic Design': 'deep-dive/snap_core.md' - 'New Board Support': 'deep-dive/board-package.md' - Misc: - 'Document Guide': 'misc/doc-guide.md' You can edit them as needed.","title":"Website Structure"},{"location":"misc/doc-guide/#write-markdown-pages","text":"On your local desktop, edit markdown files under web-doc/docs folder. If you want to add/delete/rename the files, you also need to edit mkdocs.yml Now it's time to work with an editor (i.e, typora) to write the documents. You also may need to learn some markdown syntax. Don't worry, that's easy. And please turn on the \"spell checking\" in your Markdown editor. In your terminal (MacOS or Linux), or cmd (Windows), start a serve process: # enter in the directory where mkdocs.yml is located cd ~/oc-accel-doc/web-doc #launch a local webserver to test your mods mkdocs serve Then open a web browser, input http://127.0.0.1:8000 . So whenever you save any markdown files, you can check the generated website immediately.","title":"Write Markdown pages"},{"location":"misc/doc-guide/#play-with-pictures","text":"","title":"Play with pictures"},{"location":"misc/doc-guide/#the-first-rule","text":"Reduce the usage of pictures. Avoid unnecessary screenshots.","title":"The first rule"},{"location":"misc/doc-guide/#its-quite-easy","text":"You can insert jpg, png, svg files. You can also simply copy paste pictures from clipboard and paste them. Copy the files into a directory ./${filename}.assets , and here ${filename} is the name of markdown file. Use relative links in the document. Note If you are using Typora, please enable \"Copy images into ./${filename}.assets folder\" in Preferences of typora.","title":"It's quite easy"},{"location":"misc/doc-guide/#tools-to-draw-diagrams","text":"You can take any drawing tools to create diagrams. You can save them as PNG format, but the better way is to save to SVG format. For the diagrams from Microsoft PowerPoint, you can select the region of a diagram in PPT, Ctrl-C to copy it, and Ctrl-V to paste it in Typora directly. In this case, the diagram is saved as an PNG file. But there is a better way to get the smallest file size and best quality: In PowerPoint, select the region of diagram, right-click mouse -> \"Save as Picture ...\" and save it as \"PDF\" format. Open the PDF file with Inkscape . (Right-click the file -> \"Open with ...\", choose Inkscape in the poped up list). Unclick \"Embed images\" and then \"OK\". In Inkscape, save it as SVG file. Insert the SVG file into Typora. In my experiment, the PNG file is 188KB. But with the above flow to save it as SVG file, its size is 62KB. As a vectored diagram, it doesn't have any quality loss when zooming in. Warning Please use normal fonts in PPT, for example \"Arial\". Otherwise you may get a SVG file with a replaced font and that may look different.","title":"Tools to draw diagrams"},{"location":"misc/doc-guide/#code-blocks-and-admonitions","text":"","title":"Code blocks and Admonitions"},{"location":"misc/doc-guide/#code-blocks","text":"Please assign the code language so it can be correctly rendered. For example ``` C for C language. // A function to implement bubble sort void bubbleSort(int arr[], int n) { int i, j; for (i = 0; i < n-1; i++) // Last i elements are already in place for (j = 0; j < n-i-1; j++) if (arr[j] > arr[j+1]) swap(&arr[j], &arr[j+1]); }","title":"Code blocks"},{"location":"misc/doc-guide/#admonitions","text":"You can use !!! Note or !!! Warning or !!! Danger to start a paragraph of admonitions. Then use 4 spaces to start the admonition text. For example !!! Danger \"Error Message\" This is a dangerous error. It will be shown as: Error Message This is a dangerous error.","title":"Admonitions"},{"location":"misc/doc-guide/#deploy-to-github-pages","text":"When most of the edition work is done, and it's time to commit your documents to oc-accel github. First, you should commit and push your changes of source files (in web-doc ) to git repository. Create pull request, ask someone to review the documents, merge them into master branch after getting approvements. Then you can simply publish website with just one step: cd <PATH>/oc-accel-doc/web-doc mkdocs gh-deploy The entire website will be pushed to gh-pages branch of omi-doc repository. The documentation website will be available at https://opencapi.github.io/omi-doc/ !","title":"Deploy to Github Pages"}]}