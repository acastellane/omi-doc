{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"OMI Overview OMI , stands for Open Memory Interface Starting with Power10 processor, the host memory is now connected to the processor through a new OMI serial interface. This Open Memory Interface (based on OpenCAPI3.1 protocol) opens a new era in memory attachment since it allows to connect new types of memories to replace conventional DDR host memory. Thanks to the serial connection, much more memory interfaces are connected to the processor chip. This means Power10 chip has 1 Terabyte/s bandwidth on memory side and the same on external hardware supporting up to 2 Petabytes of addressable memories! Thanks to the very low latency, this OMI near-memory connection brings plenty of new memory disaggregation possibilities. \"Memory inception\" for example, allows a process to borrow host memory from another server. \"Pool of memories\" can now be built to optimize the sharing of the most expensive resource of our servers. Using this CAPI/OpenCAPI technology associated with FPGAs has not only solved unbelievable bottlenecks, but has drastically decreased the power consumption of previous solutions. All the code and related materials are contributed to different Github repositories: https://github.com/OpenCAPI/omi_enablement/ contains an example of host on a FMC+ board to evaluate DDMIMs modules https://github.com/OpenCAPI/omi_asic_device_reference_design contains an asic design example https://github.com/OpenCAPI/omi_host_fire contains a host FPGA example https://github.com/OpenCAPI/omi_device_ice contains a device FPGA example","title":"Overview"},{"location":"#omi-overview","text":"OMI , stands for Open Memory Interface Starting with Power10 processor, the host memory is now connected to the processor through a new OMI serial interface. This Open Memory Interface (based on OpenCAPI3.1 protocol) opens a new era in memory attachment since it allows to connect new types of memories to replace conventional DDR host memory. Thanks to the serial connection, much more memory interfaces are connected to the processor chip. This means Power10 chip has 1 Terabyte/s bandwidth on memory side and the same on external hardware supporting up to 2 Petabytes of addressable memories! Thanks to the very low latency, this OMI near-memory connection brings plenty of new memory disaggregation possibilities. \"Memory inception\" for example, allows a process to borrow host memory from another server. \"Pool of memories\" can now be built to optimize the sharing of the most expensive resource of our servers. Using this CAPI/OpenCAPI technology associated with FPGAs has not only solved unbelievable bottlenecks, but has drastically decreased the power consumption of previous solutions. All the code and related materials are contributed to different Github repositories: https://github.com/OpenCAPI/omi_enablement/ contains an example of host on a FMC+ board to evaluate DDMIMs modules https://github.com/OpenCAPI/omi_asic_device_reference_design contains an asic design example https://github.com/OpenCAPI/omi_host_fire contains a host FPGA example https://github.com/OpenCAPI/omi_device_ice contains a device FPGA example","title":"OMI Overview"},{"location":"blocs/apollo/","text":"Apollo Description Description Apollo is a card hosting Fire FPGA RTL design and aimed at interconnecting a DIMM with a SLIM/SAS connector (using OMI - Open Memory Interface).","title":"Apollo Description"},{"location":"blocs/apollo/#apollo-description","text":"","title":"Apollo Description"},{"location":"blocs/apollo/#description","text":"Apollo is a card hosting Fire FPGA RTL design and aimed at interconnecting a DIMM with a SLIM/SAS connector (using OMI - Open Memory Interface).","title":"Description"},{"location":"blocs/enablement/","text":"OMI ENABLEMENT Description Hardware Description For the purpose of opensourcing the design, a collaboration between OMI members led to a tuning of omi host fpga design \"Fire\" to be used in a VCU128 Card With addition of a simple FMC+ connected add-on card, any OMI compatible memory DDIMM module can be evaluated. The setup allows evaluation of 2 DDIM modules in slots A and B. Some code is required to synchronise and test the OMI DDIMMs. Either the code is executed in a companion raspberry pi, or it can be run in an embedded microblaze processor. Example of python code is available at : [Python Code] Python Code Checks I2C tree Synchronizes DDIMMs Executes simple transfers in memory (not published yet) !!! Note The Raspberry pi can host an Cronus server, should you want to evaluate in a Cronus environment. REQUIREMENTS Hardware requirements : Get a VCU128 Board an adapter board at least a DDIMM module a usb relay card to ensure automated fire reset / 3.3V / 12V POWER control (will be included in adapter board version 2) Software requirements : obtain a AMD/Xilinx Licence for Vivado. Use 2018.3 version. ENABLEMENT STEPS git clone the no_encrypt_vcu128 branch of Fire design. First synthetise, implement and generate bitstream of \"FIRE\" design for vcu128 using the specific branch. git clone the enablement and use python directory with a debugging raspberry pi or any computer with I2C capability to check you can see the design.","title":"FMC+ ENABLEMENT Description"},{"location":"blocs/enablement/#omi-enablement-description","text":"","title":"OMI ENABLEMENT Description"},{"location":"blocs/enablement/#hardware-description","text":"For the purpose of opensourcing the design, a collaboration between OMI members led to a tuning of omi host fpga design \"Fire\" to be used in a VCU128 Card With addition of a simple FMC+ connected add-on card, any OMI compatible memory DDIMM module can be evaluated. The setup allows evaluation of 2 DDIM modules in slots A and B. Some code is required to synchronise and test the OMI DDIMMs. Either the code is executed in a companion raspberry pi, or it can be run in an embedded microblaze processor. Example of python code is available at : [Python Code] Python Code Checks I2C tree Synchronizes DDIMMs Executes simple transfers in memory (not published yet) !!! Note The Raspberry pi can host an Cronus server, should you want to evaluate in a Cronus environment.","title":"Hardware Description"},{"location":"blocs/enablement/#requirements","text":"Hardware requirements : Get a VCU128 Board an adapter board at least a DDIMM module a usb relay card to ensure automated fire reset / 3.3V / 12V POWER control (will be included in adapter board version 2) Software requirements : obtain a AMD/Xilinx Licence for Vivado. Use 2018.3 version.","title":"REQUIREMENTS"},{"location":"blocs/enablement/#enablement-steps","text":"git clone the no_encrypt_vcu128 branch of Fire design. First synthetise, implement and generate bitstream of \"FIRE\" design for vcu128 using the specific branch. git clone the enablement and use python directory with a debugging raspberry pi or any computer with I2C capability to check you can see the design.","title":"ENABLEMENT STEPS"},{"location":"blocs/fire/","text":"FIRE Description Description Fire is a OMI host FPGA design. Initial design was developed to populate the Apollo card. A branch \"no- encrypt_vcu128 \" has been created to allow usage of Fire in a VCU128 board with a FMC+ connector and an adaptation board. Check any enablement information on the enablement page","title":"FIRE Description"},{"location":"blocs/fire/#fire-description","text":"","title":"FIRE Description"},{"location":"blocs/fire/#description","text":"Fire is a OMI host FPGA design. Initial design was developed to populate the Apollo card. A branch \"no- encrypt_vcu128 \" has been created to allow usage of Fire in a VCU128 board with a FMC+ connector and an adaptation board. Check any enablement information on the enablement page","title":"Description"},{"location":"blocs/gemini/","text":"Gemini Description Description Gemini is a demo card hosting an Ice FPGA design and connected to a server DIMM connector. It enables attachment of a DDR4 memory through OMI.","title":"GEMINI Description"},{"location":"blocs/gemini/#gemini-description","text":"","title":"Gemini Description"},{"location":"blocs/gemini/#description","text":"Gemini is a demo card hosting an Ice FPGA design and connected to a server DIMM connector. It enables attachment of a DDR4 memory through OMI.","title":"Description"},{"location":"blocs/ice/","text":"ICE Description Description Ice is an FPGA design populating Gemini card.","title":"ICE Description"},{"location":"blocs/ice/#ice-description","text":"","title":"ICE Description"},{"location":"blocs/ice/#description","text":"Ice is an FPGA design populating Gemini card.","title":"Description"},{"location":"misc/doc-guide/","text":"How to generate this website This static documentation website is created by MkDocs and is using a theme from bootswatch . It uses \"github pages\" and this site is hosted by Github. The documentation source files are written in Markdown format. With MkDocs tool, the generated site files (html files) are automatically pushed into a specific branch gh-pages of the git repository. Installation 1. Install python and pip python and pip 2. Install mkdocs-bootswatch pip install mkdocs-bootswatch Please refer to bootswatch for more information. 3. Install a markdown editor You can simply edit the markdown (.md) files by any text editor, but it's better to user a professional markdown editor. typora . It supports all of the platforms (Windows/MacOS/Linux). Please configure typora to strict Markdown mode. That ensures you get the same output effects on both typora and mkdocs . vscode . It's also a good editor and has abundant functions and extensions. You can install extensions of Markdown, Preview and Spell checker. 4. Install other optional tools pdf2svg: This tool can convert a pdf lossless picture to svg format. For Mac OS, it can be easily installed by Homebrew , simply by brew install pdf2svg . Alternative choice is Inkscape which is a free drawing tool and can help you draw and convert vector graphics. Website Structure First, you need to git clone the oc-accel repository and go to web-doc directory. Make sure you are working on a branch other than master. $ git clone git@github.com:OpenCAPI/oc-accel-doc.git $ cd oc-accel/web-doc Create a branch if needed: $ git branch <new-branch-name> $ git checkout <A branch other than master> The docs folder is where to put the markdown files, and the mkdocs.yml lists the website structure and global definitons. For example, this site has a structure like: nav: - Home: 'index.md' - User Guide: - 'Prepare Environment': 'user-guide/prepare-env.md' - 'Run an example': 'user-guide/run-example.md' - 'Create a new action': 'user-guide/new-action.md' - 'Co-Simulation': 'user-guide/co-simulation.md' - 'FPGA Image build': 'user-guide/make-image.md' - 'Optimize HLS action': 'user-guide/optimize-hls.md' - 'Deploy on Power Server': 'user-guide/deploy.md' - 'Debug an issue': 'user-guide/debug-issue.md' - 'Command Reference': 'user-guide/command-reference.md' - Examples: - 'hdl_example': 'actions-doc/hdl-example.md' - 'hdl_helloworld': 'actions-doc/hdl-helloworld.md' - 'hls_helloworld_1024': 'actions-doc/hls-helloworld_1024.md' - 'hls_memcopy': 'actions-doc/hls-memcopy.md' - Deep Dive: - 'SNAP Software API': 'deep-dive/libosnap.md' - 'SNAP Registers': 'deep-dive/registers.md' - 'SNAP Logic Design': 'deep-dive/snap_core.md' - 'New Board Support': 'deep-dive/board-package.md' - Misc: - 'Document Guide': 'misc/doc-guide.md' You can edit them as needed. Write Markdown pages On your local desktop, edit markdown files under web-doc/docs folder. If you want to add/delete/rename the files, you also need to edit mkdocs.yml Now it's time to work with an editor (i.e, typora) to write the documents. You also may need to learn some markdown syntax. Don't worry, that's easy. And please turn on the \"spell checking\" in your Markdown editor. In your terminal (MacOS or Linux), or cmd (Windows), start a serve process: # enter in the directory where mkdocs.yml is located cd ~/oc-accel-doc/web-doc #launch a local webserver to test your mods mkdocs serve Then open a web browser, input http://127.0.0.1:8000 . So whenever you save any markdown files, you can check the generated website immediately. Play with pictures The first rule Reduce the usage of pictures. Avoid unnecessary screenshots. It's quite easy You can insert jpg, png, svg files. You can also simply copy paste pictures from clipboard and paste them. Copy the files into a directory ./${filename}.assets , and here ${filename} is the name of markdown file. Use relative links in the document. Note If you are using Typora, please enable \"Copy images into ./${filename}.assets folder\" in Preferences of typora. Tools to draw diagrams You can take any drawing tools to create diagrams. You can save them as PNG format, but the better way is to save to SVG format. For the diagrams from Microsoft PowerPoint, you can select the region of a diagram in PPT, Ctrl-C to copy it, and Ctrl-V to paste it in Typora directly. In this case, the diagram is saved as an PNG file. But there is a better way to get the smallest file size and best quality: In PowerPoint, select the region of diagram, right-click mouse -> \"Save as Picture ...\" and save it as \"PDF\" format. Open the PDF file with Inkscape . (Right-click the file -> \"Open with ...\", choose Inkscape in the poped up list). Unclick \"Embed images\" and then \"OK\". In Inkscape, save it as SVG file. Insert the SVG file into Typora. In my experiment, the PNG file is 188KB. But with the above flow to save it as SVG file, its size is 62KB. As a vectored diagram, it doesn't have any quality loss when zooming in. Warning Please use normal fonts in PPT, for example \"Arial\". Otherwise you may get a SVG file with a replaced font and that may look different. Code blocks and Admonitions Code blocks Please assign the code language so it can be correctly rendered. For example ``` C for C language. // A function to implement bubble sort void bubbleSort(int arr[], int n) { int i, j; for (i = 0; i < n-1; i++) // Last i elements are already in place for (j = 0; j < n-i-1; j++) if (arr[j] > arr[j+1]) swap(&arr[j], &arr[j+1]); } Admonitions You can use !!! Note or !!! Warning or !!! Danger to start a paragraph of admonitions. Then use 4 spaces to start the admonition text. For example !!! Danger \"Error Message\" This is a dangerous error. It will be shown as: Error Message This is a dangerous error. Deploy to Github Pages When most of the edition work is done, and it's time to commit your documents to oc-accel github. First, you should commit and push your changes of source files (in web-doc ) to git repository. Create pull request, ask someone to review the documents, merge them into master branch after getting approvements. Then you can simply publish website with just one step: cd <PATH>/oc-accel-doc/web-doc mkdocs gh-deploy The entire website will be pushed to gh-pages branch of omi-doc repository. The documentation website will be available at https://opencapi.github.io/omi-doc/ !","title":"Document Guide"},{"location":"misc/doc-guide/#how-to-generate-this-website","text":"This static documentation website is created by MkDocs and is using a theme from bootswatch . It uses \"github pages\" and this site is hosted by Github. The documentation source files are written in Markdown format. With MkDocs tool, the generated site files (html files) are automatically pushed into a specific branch gh-pages of the git repository.","title":"How to generate this website"},{"location":"misc/doc-guide/#installation","text":"","title":"Installation"},{"location":"misc/doc-guide/#1-install-python-and-pip","text":"python and pip","title":"1. Install python and pip"},{"location":"misc/doc-guide/#2-install-mkdocs-bootswatch","text":"pip install mkdocs-bootswatch Please refer to bootswatch for more information.","title":"2. Install mkdocs-bootswatch"},{"location":"misc/doc-guide/#3-install-a-markdown-editor","text":"You can simply edit the markdown (.md) files by any text editor, but it's better to user a professional markdown editor. typora . It supports all of the platforms (Windows/MacOS/Linux). Please configure typora to strict Markdown mode. That ensures you get the same output effects on both typora and mkdocs . vscode . It's also a good editor and has abundant functions and extensions. You can install extensions of Markdown, Preview and Spell checker.","title":"3. Install a markdown editor"},{"location":"misc/doc-guide/#4-install-other-optional-tools","text":"pdf2svg: This tool can convert a pdf lossless picture to svg format. For Mac OS, it can be easily installed by Homebrew , simply by brew install pdf2svg . Alternative choice is Inkscape which is a free drawing tool and can help you draw and convert vector graphics.","title":"4. Install other optional tools"},{"location":"misc/doc-guide/#website-structure","text":"First, you need to git clone the oc-accel repository and go to web-doc directory. Make sure you are working on a branch other than master. $ git clone git@github.com:OpenCAPI/oc-accel-doc.git $ cd oc-accel/web-doc Create a branch if needed: $ git branch <new-branch-name> $ git checkout <A branch other than master> The docs folder is where to put the markdown files, and the mkdocs.yml lists the website structure and global definitons. For example, this site has a structure like: nav: - Home: 'index.md' - User Guide: - 'Prepare Environment': 'user-guide/prepare-env.md' - 'Run an example': 'user-guide/run-example.md' - 'Create a new action': 'user-guide/new-action.md' - 'Co-Simulation': 'user-guide/co-simulation.md' - 'FPGA Image build': 'user-guide/make-image.md' - 'Optimize HLS action': 'user-guide/optimize-hls.md' - 'Deploy on Power Server': 'user-guide/deploy.md' - 'Debug an issue': 'user-guide/debug-issue.md' - 'Command Reference': 'user-guide/command-reference.md' - Examples: - 'hdl_example': 'actions-doc/hdl-example.md' - 'hdl_helloworld': 'actions-doc/hdl-helloworld.md' - 'hls_helloworld_1024': 'actions-doc/hls-helloworld_1024.md' - 'hls_memcopy': 'actions-doc/hls-memcopy.md' - Deep Dive: - 'SNAP Software API': 'deep-dive/libosnap.md' - 'SNAP Registers': 'deep-dive/registers.md' - 'SNAP Logic Design': 'deep-dive/snap_core.md' - 'New Board Support': 'deep-dive/board-package.md' - Misc: - 'Document Guide': 'misc/doc-guide.md' You can edit them as needed.","title":"Website Structure"},{"location":"misc/doc-guide/#write-markdown-pages","text":"On your local desktop, edit markdown files under web-doc/docs folder. If you want to add/delete/rename the files, you also need to edit mkdocs.yml Now it's time to work with an editor (i.e, typora) to write the documents. You also may need to learn some markdown syntax. Don't worry, that's easy. And please turn on the \"spell checking\" in your Markdown editor. In your terminal (MacOS or Linux), or cmd (Windows), start a serve process: # enter in the directory where mkdocs.yml is located cd ~/oc-accel-doc/web-doc #launch a local webserver to test your mods mkdocs serve Then open a web browser, input http://127.0.0.1:8000 . So whenever you save any markdown files, you can check the generated website immediately.","title":"Write Markdown pages"},{"location":"misc/doc-guide/#play-with-pictures","text":"","title":"Play with pictures"},{"location":"misc/doc-guide/#the-first-rule","text":"Reduce the usage of pictures. Avoid unnecessary screenshots.","title":"The first rule"},{"location":"misc/doc-guide/#its-quite-easy","text":"You can insert jpg, png, svg files. You can also simply copy paste pictures from clipboard and paste them. Copy the files into a directory ./${filename}.assets , and here ${filename} is the name of markdown file. Use relative links in the document. Note If you are using Typora, please enable \"Copy images into ./${filename}.assets folder\" in Preferences of typora.","title":"It's quite easy"},{"location":"misc/doc-guide/#tools-to-draw-diagrams","text":"You can take any drawing tools to create diagrams. You can save them as PNG format, but the better way is to save to SVG format. For the diagrams from Microsoft PowerPoint, you can select the region of a diagram in PPT, Ctrl-C to copy it, and Ctrl-V to paste it in Typora directly. In this case, the diagram is saved as an PNG file. But there is a better way to get the smallest file size and best quality: In PowerPoint, select the region of diagram, right-click mouse -> \"Save as Picture ...\" and save it as \"PDF\" format. Open the PDF file with Inkscape . (Right-click the file -> \"Open with ...\", choose Inkscape in the poped up list). Unclick \"Embed images\" and then \"OK\". In Inkscape, save it as SVG file. Insert the SVG file into Typora. In my experiment, the PNG file is 188KB. But with the above flow to save it as SVG file, its size is 62KB. As a vectored diagram, it doesn't have any quality loss when zooming in. Warning Please use normal fonts in PPT, for example \"Arial\". Otherwise you may get a SVG file with a replaced font and that may look different.","title":"Tools to draw diagrams"},{"location":"misc/doc-guide/#code-blocks-and-admonitions","text":"","title":"Code blocks and Admonitions"},{"location":"misc/doc-guide/#code-blocks","text":"Please assign the code language so it can be correctly rendered. For example ``` C for C language. // A function to implement bubble sort void bubbleSort(int arr[], int n) { int i, j; for (i = 0; i < n-1; i++) // Last i elements are already in place for (j = 0; j < n-i-1; j++) if (arr[j] > arr[j+1]) swap(&arr[j], &arr[j+1]); }","title":"Code blocks"},{"location":"misc/doc-guide/#admonitions","text":"You can use !!! Note or !!! Warning or !!! Danger to start a paragraph of admonitions. Then use 4 spaces to start the admonition text. For example !!! Danger \"Error Message\" This is a dangerous error. It will be shown as: Error Message This is a dangerous error.","title":"Admonitions"},{"location":"misc/doc-guide/#deploy-to-github-pages","text":"When most of the edition work is done, and it's time to commit your documents to oc-accel github. First, you should commit and push your changes of source files (in web-doc ) to git repository. Create pull request, ask someone to review the documents, merge them into master branch after getting approvements. Then you can simply publish website with just one step: cd <PATH>/oc-accel-doc/web-doc mkdocs gh-deploy The entire website will be pushed to gh-pages branch of omi-doc repository. The documentation website will be available at https://opencapi.github.io/omi-doc/ !","title":"Deploy to Github Pages"}]}